{"version":3,"sources":["components/charts2.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","math","statoilStock","map","item","last","dates","date","mathlength","length","sma","avgDiff","avgDiffSecond","avgsecond","bollingerPluss","bollingerMinus","z","i","last20","slice","avg","reduce","a","b","toFixed","y","sumsecond","parseFloat","newBollingerMinus","acc2","curr","push","newBollingerPluss","acc3","acc","this","newsma","react_default","createElement","es","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","stockholmStock","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","renderChart","React","PureComponent","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","chartData","setState","className","charts2_Dashboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e393fd0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport statoilStock from \"../data/Oslo_STL.json\";\r\nimport stockholmStock from \"../data/Stockholm_ABB\";\r\n\r\nexport default class Dashboard extends React.PureComponent {\r\n  math() {\r\n    let math = statoilStock.map(item => item.last); //Mapper json data til array av math\r\n    let dates = statoilStock.map(item => item.date);\r\n    const mathlength = math.length; //setter lengden av matharrayet til en variabel\r\n    let sma = []; //Start av array deklareringer\r\n    let avgDiff = [];\r\n    let avgDiffSecond = [];\r\n    let avgsecond = [];\r\n    let bollingerPluss = [];\r\n    let bollingerMinus = []; //Slutt på dekalerering av arrayer\r\n    let z = 0; // Startverdi for itterering av de 20 første verdiene av bolinger\r\n    while (z < 20) {\r\n      //Løkke for å legge til 0 som bollinger og sma for de 20 første punktene ettersom vi ikke har 20 dager før disse.\r\n      bollingerMinus[z] = 0;\r\n      bollingerPluss[z] = 0;\r\n      sma[z] = 0;\r\n      z++;\r\n    }\r\n    for (var i = 19; i < mathlength; i++) {\r\n      // Ittererer så mange punkter det er i arrayet til statoilStock\r\n      //Setter SMA til de første 20 dagene til 0.\r\n      var last20 = math.slice(i - 20, i); //Fører inn de 20 siste tidligere verdiene av arrayet inn i en egen last20 array\r\n      var sum = last20.reduce((a, b) => a + b, 0); //Summerer verdien av de 20 siste dagenes verdi\r\n      var avg = sum / 20; //Regner gjennomsnittet av de 20 siste dagene\r\n      sma[i] = avg.toFixed(1); // Setter verdien av gjennomsnittet til et punkt i SMA\r\n      var y = 0; //Kilde til basis for utregning av Bollinger: https://derickbailey.com/2014/09/21/calculating-standard-deviation-with-array-map-and-array-reduce-in-javascript/\r\n      while (y < 20) {\r\n        avgDiff[y] = last20[y] - sma[i]; //Ittererer igjennom last20, trekker fra SMA verdien og finner da gjennomsnittlig differanse\r\n        avgDiffSecond[y] = avgDiff[y] * avgDiff[y]; //Ganger avgDiff med seg selv for å finne opphøyd i andre\r\n        y++;\r\n      }\r\n      var sumsecond = avgDiffSecond.reduce((a, b) => a + b, 0); //Setter til slutt summen av avgDiff i andre til en variabel sumsecond\r\n      avgsecond[i] = sumsecond / 20; //Deler verdien på 20 for å få gjennomsnittet.\r\n      bollingerPluss[i] = +parseFloat(math[i] + avgsecond[i]).toFixed(1); //Regner ut høyeste bollinger ved å plusse gjennomsnittligdiff pluss faktisk verdi og implicit parser med 1 decimal (samme som orginal data)\r\n      bollingerMinus[i] = +parseFloat(math[i] - avgsecond[i]).toFixed(1); //Samme som pluss bare minus\r\n    }\r\n    var newBollingerMinus = bollingerMinus.reduce((acc2, curr) => {\r\n      const item = { date: dates[i], last: curr };\r\n      acc2.push(item);\r\n      return acc2;\r\n    }, []);\r\n    var newBollingerPluss = bollingerPluss.reduce((acc3, curr) => {\r\n      const item = { date: dates[i], last: curr };\r\n      acc3.push(item);\r\n      return acc3;\r\n    }, []);\r\n    var newsma = sma.reduce((acc, curr) => {\r\n      const item = { date: dates[i], last: curr };\r\n      acc.push(item);\r\n      return acc;\r\n    }, []);\r\n    //console.log(avgsecond);\r\n    return [newsma, newBollingerMinus, newBollingerPluss];\r\n  }\r\n\r\n  renderChart() {\r\n    const math = this.math();\r\n    const newsma = math[0];\r\n    const newBollingerPluss = math[2];\r\n    const newBollingerMinus = math[1];\r\n    // console.log(\"newBollingerMinus er:\", newBollingerMinus);\r\n    // console.log(\"Statoilstock er:\", statoilStock);\r\n    // console.log(\"Svenskene er:\", stockholmStock);\r\n    // console.log(\"Statoil SMA er:\", newsma);\r\n    return (\r\n      <Line\r\n        data={{\r\n          labels: statoilStock.map(item => item.date),\r\n          datasets: [\r\n            {\r\n              data: statoilStock.map(item => item.last),\r\n              label: \"Oslo børs\",\r\n              backgroundColor: \"\",\r\n              borderColor: \"rgba(0,51,102)\",\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: \"rgba(255, 1, 30, 0.64)\",\r\n              hoverBorderColor: \"rgba(0,51,102)\"\r\n            },\r\n            {\r\n              data: stockholmStock.map(item => item.last),\r\n              label: \"Svenskene\",\r\n              backgroundColor: \"\",\r\n              borderColor: \"rgba(0,0,0)\",\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n              hoverBorderColor: \"rgba(255,99,132,1)\"\r\n            },\r\n            {\r\n              data: newsma.map(item => item.last),\r\n              label: \"Statoil SMA\",\r\n              backgroundColor: \"\",\r\n              borderColor: \"rgba(255, 1, 30, 0.64)\",\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n              hoverBorderColor: \"rgba(255,99,132,1)\"\r\n            },\r\n            {\r\n              data: newBollingerMinus.map(item => item.last),\r\n              label: \"Statoil Bollinger minus\",\r\n              backgroundColor: \"\",\r\n              borderColor: \"rgba(193,0,0)\",\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n              hoverBorderColor: \"rgba(255,99,132,1)\"\r\n            },\r\n            {\r\n              data: newBollingerPluss.map(item => item.last),\r\n              label: \"Statoil Bollinger pluss\",\r\n              backgroundColor: \"\",\r\n              borderColor: \"rgba(51,102,0)\",\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n              hoverBorderColor: \"rgba(255,99,132,1)\"\r\n            }\r\n          ]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n          scales: { yAxes: [{ ticks: { beginAtZero: true } }] },\r\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\"\r\n        }}\r\n        backgroundColor=\"rgba(255, 99, 132, 0.2)\"\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderChart()}</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Chart from \"./components/charts2\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { chartData: {} };\n  }\n  getChartData() {\n    this.setState({\n      chartData: \"\"\n    });\n  }\n  //Old render:\n  //<canvas id=\"STL\" width=\"900\" height=\"450\" />\n  //<canvas id=\"ABB\" width=\"900\" height=\"450\" />\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart\n          data={this.state.chartData}\n          options={{ maintainAspectRatio: false }}\n        />{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}